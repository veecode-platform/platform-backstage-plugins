#!/usr/bin/env python3
# -*- coding: utf-8 -*-
## This script downloads the images of the plugins from the Kong Hub
## and saves them to the `src/assets/plugins` directory.

import os
import re
import sys
import json
import requests
import subprocess
from bs4 import BeautifulSoup
from urllib.parse import urljoin, urlparse

# Map of the categories in the Kong Hub to the categories in the app
TAG_MAP = {
    "oss": "OSS",
    "paid": "KONNECT PAID",
    "premium": "KONNECT PREMIUM",
    "enterprise": "ENTERPRISE"
}

# Categories to ignore from the Kong Hub
IGNORE_CATEGORIES = ["third-party"]

# Base URL of the Kong Hub
BASE_URL = "https://docs.konghq.com/hub/"
#get current file path
CURRENT_PATH = os.path.dirname(os.path.realpath(__file__))
# Directory to save the downloaded images
DOWNLOAD_DIR = os.path.join(CURRENT_PATH, "src", "assets", "plugins")

# Function to install a package using pip
def install_package(package):
    subprocess.check_call([sys.executable, "-m", "pip", "install", package])

# Function to install the required packages
def install_pre_requisites():
    try:
        import requests
    except ImportError:
        print("requests not found, installing...")
        install_package("requests")

    try:
        from bs4 import BeautifulSoup
    except ImportError:
        print("beautifulsoup4 not found, installing...")
        install_package("beautifulsoup4")

    print("All required packages are installed.")

# Function to download an image from a URL
def download_image(image_url, save_path):
    """Downloads an image from a URL and saves it to the specified path."""
    try:
        response = requests.get(image_url, stream=True)
        if response.status_code == 200:
            # print(f"Downloading: {image_url}")
            with open(save_path, 'wb') as file:
                for chunk in response.iter_content(1024):
                    file.write(chunk)
        else:
            print(f"Failed to download: {image_url}")
    except Exception as e:
        print(f"Error downloading {image_url}: {e}")

# Function to get the categories and plugins from the Kong Hub
def get_categories(categories):
    categories_result = []
    for category in categories:
        category_title = re.sub(r' +', ' ', category.find('h4', class_='page-hub--category-title').text.strip())
        cards = category.find_all('div', class_='page-hub--category-cards')
        for card in cards:
            categories_result.append({'category': category_title, 'plugins': get_plugin_cards_info(card)})
    return sorted(categories_result, key=lambda x: x['category'])
                
# Function to get the information of the plugins in a category
def get_plugin_cards_info(category_cards):
    cards = category_cards.find_all('div', class_='plugin-card')
    cards_result = []
    for card in cards:
        card_item = {}
        card_item['name'] = card.find('p').text
        card_item['description'] = card.find('div', class_='plugin-card--meta__description').text
        card_item['image'] = urljoin(BASE_URL, card.find('img')['src'])
        card_item['slug'] = card.find('a')['href'].split('/')[3]
        # Get the tags for the plugin
        badge_list = [cls for span in card.find_all('span', class_="badge") for cls in span['class'] if cls != "badge"]
        if "badge" in badge_list:
            badge_list.remove("badge")
        card_item['tags'] = [TAG_MAP.get(cat, cat) for cat in badge_list]
        cards_result.append(card_item)
    return cards_result

# Function to convert a snake_case string to camelCase
def to_camel_case(snake_str):
    components = re.split('[-_]', snake_str)
    return (components[0].title() + ''.join(x.title() for x in components[1:]))

# Function to create the images.ts file
def create_images_ts_file(images_ts_file_content, images_ts_file_export_content):
    file_path = os.path.join(CURRENT_PATH, "src", "data", "images.ts")
    print(f"Updating file at {file_path}")

    with open(file_path, "w") as file:
        file.write("// Warning: This file is generated by the `plugins-updater` script.\n")
        file.write("\n".join(images_ts_file_content))
        file.write("\n")
        file.write("\n")
        file.write("export {\n")
        file.write(",\n".join(images_ts_file_export_content))
        file.write("\n};")

# Function to create the data.ts file
def create_data_ts_file(images_ts_file_export_content, categories):
    file_path = os.path.join(CURRENT_PATH, "src", "data", "data.ts")
    print(f"Updating file at {file_path}")
    
    # Create the content for the TypeScript file
    imports_content = "import {\n" + ",\n".join(images_ts_file_export_content) + "\n} from './images';"
    export_content = "export const PluginsInfoData = " + json.dumps({'categories': categories}, indent=4)+ ";"
    
    pattern_quotes = r'\"(\w+)\":'
    export_content = re.sub(pattern_quotes, r'\1:', export_content)
    
    # Second regex: Remove quotes around the values for the "image" key
    pattern_image = r'(image:\s*)"([^"]+)"'
    export_content = re.sub(pattern_image, r'\1\2', export_content)

    # Write the content to the TypeScript file
    with open(file_path, "w") as file:
        file.write("// Warning: This file is generated by the `plugins-updater` script.\n")
        file.write(imports_content)
        file.write("\n\n")
        file.write(export_content)
        file.write("\n")

# Function to fetch the page data
def fetch_page_data():
    response = requests.get(BASE_URL)
    if response.status_code != 200:
        raise Exception(f"Failed to fetch categories from {BASE_URL}")
    return BeautifulSoup(response.content, 'html.parser')

def main():
    install_pre_requisites()
    # Create the download directory if it does not exist
    #remove the directory if it exists
    if os.path.exists(DOWNLOAD_DIR):
        os.system(f"rm -rf {DOWNLOAD_DIR}/*")
    os.makedirs(DOWNLOAD_DIR, exist_ok=True)
    
    page = fetch_page_data()

    categories = page.find_all('div', class_='page-hub--category', id=lambda value: value not in IGNORE_CATEGORIES)
    categories=get_categories(categories)
    images_ts_file_content=[]
    images_ts_file_export_content=[]
    for category in categories:
        category_title = re.sub(r' +', ' ', category['category'].lower().replace('&', '')).replace(' ', '-')
        for card in category['plugins']:
            file_name = os.path.basename(urlparse(card['image']).path)
            download_image(card['image'], os.path.join(DOWNLOAD_DIR,file_name))
            images_ts_file_content.append(f"import {to_camel_case(card['slug'])}Img from \"../assets/plugins/{file_name}\";")
            images_ts_file_export_content.append(f"{to_camel_case(card['slug'])}Img")
            #Override the image key with the camel case version
            card['image'] = f"{to_camel_case(card['slug'])}Img"
    
    # remove duplicates anbd sort the lists
    images_ts_file_export_content = sorted(list(set(images_ts_file_export_content)))
    images_ts_file_content = sorted(list(set(images_ts_file_content)))
    
    # sort images_ts_file_content
    create_images_ts_file(images_ts_file_content, images_ts_file_export_content)
    create_data_ts_file(images_ts_file_export_content, categories)
    print("Plugin images and data updated successfully.")

if __name__ == "__main__":
    main()
